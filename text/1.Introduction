Partial differential equations (PDEs) and the numeric approximations to their solutions have long been sought across disciplines for their uses in modelling physical systems. 
Domain scientists implement numerical frameworks resembling discretized approximations to the problem they seek to solve;
such problems often include computational fluid dynamics (CFD), compressible and incompressible flows i.e. Navierâ€“Stokes (NS), among others. 
The assembly of these problems is typically motivated by the desire to approximate the behavior of physical systems such as modelling seismic activity, aircraft drag, shear stress placed upon objects. 
However, the complexity of these problems expand greatly as the constraints that attempt to more closely model certain conditions are placed upon them. 

In a high-performance computing (HPC) context the particular concerns of these numeric analysis activities include scaling the problem up to a finer mesh, decreasing the time taken to compute the solution, and efficiently utilizing the available computing resources.
The continued investigation of these goals has led continued reimplementation of different techniques that more closely fit both the specific mathematical problem and the available computational resources. 
Sparse matrix representation---and in particular the use of sparse matrix-vector multiplication (SpMV)---remains a fundamental and heavily studied technique in HPC.
Sparse matrices are constructed through several means, though always with the intent to represent a matrix that is highly sparse (i.e. most entries are zero) with a minimized memory expense.    
For most numerical analysis applications, SpMV is a necessary operation for dynamic (i.e. time-dependent) problems where the solution $u$ at some time $t$ requires data (e.g. grid data, boundary data) from a prior solution at time $t - 1$.  

Some contemporary implementations of matrix-vector multiplication can construct the operation in a \textit{matrix-free} representation that eliminates the need to store a discrete instance of the matrix (sparse or otherwise.)
This technique is preferred for matrices with a regular, repeating form for that can be decomposed into a collection of computational kernels. 
For matrices that are lack consistency or that are frequently updated, matrix-free representations can become a challenge and limited in their computational efficiency when compared to a properly preconditioned SpMV \fakecite.





